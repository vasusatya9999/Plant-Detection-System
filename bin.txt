Header---
            <!-- <div class="social-media">
                <a href="https://instagram.com/sushmitha_bhat10?igshid=NGExMmI2YTkyZg=="><i  class="bx bxl-instagram"></i></a>
                <a href="https://www.linkedin.com/in/sushmitha-m-444148265/"><i class="bx bxl-linkedin"></i></a>
                <a href="https://github.com/sush1002"><i class="bx bxl-github"></i></a>
                <a href="https://stackoverflow.com/users/22148322/blogger10"><i class="bx bxl-stack-overflow"></i></a>
            </div> -->
            <!-- <a href="images/updated_resume1.pdf" class="btn">Download Resume</a> -->


<!-- //Auth
//   auth.createUserWithEmailAndPassword(email,password)
//   .then(function(){

//     var user=auth.currentUser

//     //Add  to firebase
//     var database_ref=database.ref()

//     //Create user
//      var user_data={
//       name:name,
//       email:email,
//       phone:phone,
//       password:password,
//       last_login: Date.now()


//      }
//      database_re.child('users/'+user.uid).set(user_data)

//      alert("User created")
//   })
//   .catch(function(error){
//     var error_code=error.code
//     var error_message=error.message
//     alert(error_message)
//   })

// } -->



    // ----- Logout 
    // document.getElementById("logout").addEventListener("click", function () {
    //     signOut(auth).then(() => {
    //         // Sign-out successful.
    //         console.log('Sign-out successful.');
    //         alert('Sign-out successful.');
    //         document.getElementById('logout').style.display = 'none';
    //     }).catch((error) => {
    //         // An error happened.
    //         console.log('An error happened.');
    //     });
    // });



       async function predict1(image) {
      
        // const prediction = await model.predict(image);
        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;
        }
    }
    async function handleImageUpload() {
    const inputElement = document.getElementById('dump');
    const file = inputElement.files[0];

    // Perform actions with the selected file, such as sending it to a server or processing it.
    const dataUrl = await convertImageToDataUrl(file);
    const prediction = await model.predict(dataUrl);
    // Call the desired function after handling the uploaded image.
    predict1(prediction)
}
function convertImageToDataUrl(file) {
    return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result);
        reader.readAsDataURL(file);
    });
}


// <script type="text/javascript">
//     // More API functions here:
//     // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

//     // the link to your model provided by Teachable Machine export panel
//     const URL = "./my_model/";

//     let model, webcam, labelContainer, maxPredictions;

//     // Load the image model and setup the webcam
//     async function init() {
     

//         // load the model and metadata
//         // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
//         // or files from your local hard drive
//         // Note: the pose library adds "tmImage" object to your window (window.tmImage)
//         model = await tmImage.load(modelURL, metadataURL);
//         maxPredictions = model.getTotalClasses();

//         // Convenience function to setup a webcam
//         const flip = true; // whether to flip the webcam
//         webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
//         await webcam.setup(); // request access to the webcam
//         await webcam.play();
//         window.requestAnimationFrame(loop);

//         // append elements to the DOM
//         document.getElementById("webcam-container").appendChild(webcam.canvas);
//         labelContainer = document.getElementById("label-container");
//         for (let i = 0; i < maxPredictions; i++) { // and class labels
//             labelContainer.appendChild(document.createElement("div"));
//         }
//     }

//     async function loop() {
//         webcam.update(); // update the webcam frame
//         await predict();
//         window.requestAnimationFrame(loop);
//     }

//     // run the webcam image through the image model
   

// script.js



    // const stream = videoElement.srcObject;
        // const tracks = stream.getTracks();
        // tracks.forEach(track => track.stop());
        // videoElement.srcObject = null;
        // // webCam=document.getElementById('webcam-container').style.display='none';
        // // webCam=document.getElementById('label-container').style.display='none';
        // const webcamContainer = document.getElementById('webcam-container');
        // const labelContainer = document.getElementById('label-container');

        // webcamContainer.removeChild(videoElement);
        // webcamContainer.style.display = 'none'; // Optional: hide the webcam container

        // // Optional: hide the label container
        // labelContainer.style.display = 'none';



          // async function init1() {

    //     const modelURL = URL + "model.json";
    //     const metadataURL = URL + "metadata.json";

    //     // load the model and metadata
    //     // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
    //     // or files from your local hard drive
    //     // Note: the pose library adds "tmImage" object to your window (window.tmImage)
    //     model = await tmImage.load(modelURL, metadataURL);
    //     maxPredictions = model.getTotalClasses();
    //     // maxPredictions=2;

    //     // Convenience function to setup a webcam
    //     const flip = true; // whether to flip the webcam
    //     webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
    //     await webcam.setup(); // request access to the webcam.
    //     await webcam.play();
    //     window.requestAnimationFrame(loop);

    //     // append elements to the DOM

    //     document.getElementById("webcam-container");

    //     // webcamcontainer=document.getElementById("webcam-container")
    //     labelContainer = document.getElementById("label-container");
    //     // webcamcontainer.appendChild(document.createElement("div"));
    //     for (let i = 0; i < maxPredictions; i++) { // and class labels

    //         labelContainer.appendChild(document.createElement("div"));
    //     }
    // }